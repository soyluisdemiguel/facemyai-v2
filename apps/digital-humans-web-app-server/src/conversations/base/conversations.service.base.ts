/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Conversations as PrismaConversations } from "@prisma/client";

export class ConversationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversations.count(args);
  }

  async conversationsItems(
    args: Prisma.ConversationsFindManyArgs
  ): Promise<PrismaConversations[]> {
    return this.prisma.conversations.findMany(args);
  }
  async conversations(
    args: Prisma.ConversationsFindUniqueArgs
  ): Promise<PrismaConversations | null> {
    return this.prisma.conversations.findUnique(args);
  }
  async createConversations(
    args: Prisma.ConversationsCreateArgs
  ): Promise<PrismaConversations> {
    return this.prisma.conversations.create(args);
  }
  async updateConversations(
    args: Prisma.ConversationsUpdateArgs
  ): Promise<PrismaConversations> {
    return this.prisma.conversations.update(args);
  }
  async deleteConversations(
    args: Prisma.ConversationsDeleteArgs
  ): Promise<PrismaConversations> {
    return this.prisma.conversations.delete(args);
  }
}
