/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Providers as PrismaProviders } from "@prisma/client";

export class ProvidersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProvidersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.providers.count(args);
  }

  async providersItems(
    args: Prisma.ProvidersFindManyArgs
  ): Promise<PrismaProviders[]> {
    return this.prisma.providers.findMany(args);
  }
  async providers(
    args: Prisma.ProvidersFindUniqueArgs
  ): Promise<PrismaProviders | null> {
    return this.prisma.providers.findUnique(args);
  }
  async createProviders(
    args: Prisma.ProvidersCreateArgs
  ): Promise<PrismaProviders> {
    return this.prisma.providers.create(args);
  }
  async updateProviders(
    args: Prisma.ProvidersUpdateArgs
  ): Promise<PrismaProviders> {
    return this.prisma.providers.update(args);
  }
  async deleteProviders(
    args: Prisma.ProvidersDeleteArgs
  ): Promise<PrismaProviders> {
    return this.prisma.providers.delete(args);
  }
}
