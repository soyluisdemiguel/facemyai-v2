/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MessageTypes as PrismaMessageTypes } from "@prisma/client";

export class MessageTypesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MessageTypesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.messageTypes.count(args);
  }

  async messageTypesItems(
    args: Prisma.MessageTypesFindManyArgs
  ): Promise<PrismaMessageTypes[]> {
    return this.prisma.messageTypes.findMany(args);
  }
  async messageTypes(
    args: Prisma.MessageTypesFindUniqueArgs
  ): Promise<PrismaMessageTypes | null> {
    return this.prisma.messageTypes.findUnique(args);
  }
  async createMessageTypes(
    args: Prisma.MessageTypesCreateArgs
  ): Promise<PrismaMessageTypes> {
    return this.prisma.messageTypes.create(args);
  }
  async updateMessageTypes(
    args: Prisma.MessageTypesUpdateArgs
  ): Promise<PrismaMessageTypes> {
    return this.prisma.messageTypes.update(args);
  }
  async deleteMessageTypes(
    args: Prisma.MessageTypesDeleteArgs
  ): Promise<PrismaMessageTypes> {
    return this.prisma.messageTypes.delete(args);
  }
}
