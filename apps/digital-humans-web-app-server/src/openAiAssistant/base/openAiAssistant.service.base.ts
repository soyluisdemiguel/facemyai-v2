/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OpenAiAssistant as PrismaOpenAiAssistant,
} from "@prisma/client";

export class OpenAiAssistantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OpenAiAssistantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.openAiAssistant.count(args);
  }

  async openAiAssistants(
    args: Prisma.OpenAiAssistantFindManyArgs
  ): Promise<PrismaOpenAiAssistant[]> {
    return this.prisma.openAiAssistant.findMany(args);
  }
  async openAiAssistant(
    args: Prisma.OpenAiAssistantFindUniqueArgs
  ): Promise<PrismaOpenAiAssistant | null> {
    return this.prisma.openAiAssistant.findUnique(args);
  }
  async createOpenAiAssistant(
    args: Prisma.OpenAiAssistantCreateArgs
  ): Promise<PrismaOpenAiAssistant> {
    return this.prisma.openAiAssistant.create(args);
  }
  async updateOpenAiAssistant(
    args: Prisma.OpenAiAssistantUpdateArgs
  ): Promise<PrismaOpenAiAssistant> {
    return this.prisma.openAiAssistant.update(args);
  }
  async deleteOpenAiAssistant(
    args: Prisma.OpenAiAssistantDeleteArgs
  ): Promise<PrismaOpenAiAssistant> {
    return this.prisma.openAiAssistant.delete(args);
  }
}
