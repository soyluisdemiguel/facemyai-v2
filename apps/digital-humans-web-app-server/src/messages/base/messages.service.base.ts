/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Messages as PrismaMessages } from "@prisma/client";

export class MessagesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MessagesCountArgs, "select">): Promise<number> {
    return this.prisma.messages.count(args);
  }

  async messagesItems(
    args: Prisma.MessagesFindManyArgs
  ): Promise<PrismaMessages[]> {
    return this.prisma.messages.findMany(args);
  }
  async messages(
    args: Prisma.MessagesFindUniqueArgs
  ): Promise<PrismaMessages | null> {
    return this.prisma.messages.findUnique(args);
  }
  async createMessages(
    args: Prisma.MessagesCreateArgs
  ): Promise<PrismaMessages> {
    return this.prisma.messages.create(args);
  }
  async updateMessages(
    args: Prisma.MessagesUpdateArgs
  ): Promise<PrismaMessages> {
    return this.prisma.messages.update(args);
  }
  async deleteMessages(
    args: Prisma.MessagesDeleteArgs
  ): Promise<PrismaMessages> {
    return this.prisma.messages.delete(args);
  }
}
