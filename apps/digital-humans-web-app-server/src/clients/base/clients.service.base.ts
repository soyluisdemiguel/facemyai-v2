/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Clients as PrismaClients } from "@prisma/client";

export class ClientsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClientsCountArgs, "select">): Promise<number> {
    return this.prisma.clients.count(args);
  }

  async clientsItems(
    args: Prisma.ClientsFindManyArgs
  ): Promise<PrismaClients[]> {
    return this.prisma.clients.findMany(args);
  }
  async clients(
    args: Prisma.ClientsFindUniqueArgs
  ): Promise<PrismaClients | null> {
    return this.prisma.clients.findUnique(args);
  }
  async createClients(args: Prisma.ClientsCreateArgs): Promise<PrismaClients> {
    return this.prisma.clients.create(args);
  }
  async updateClients(args: Prisma.ClientsUpdateArgs): Promise<PrismaClients> {
    return this.prisma.clients.update(args);
  }
  async deleteClients(args: Prisma.ClientsDeleteArgs): Promise<PrismaClients> {
    return this.prisma.clients.delete(args);
  }
}
