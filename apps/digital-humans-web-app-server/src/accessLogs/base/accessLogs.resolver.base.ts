/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AccessLogs } from "./AccessLogs";
import { AccessLogsCountArgs } from "./AccessLogsCountArgs";
import { AccessLogsFindManyArgs } from "./AccessLogsFindManyArgs";
import { AccessLogsFindUniqueArgs } from "./AccessLogsFindUniqueArgs";
import { CreateAccessLogsArgs } from "./CreateAccessLogsArgs";
import { UpdateAccessLogsArgs } from "./UpdateAccessLogsArgs";
import { DeleteAccessLogsArgs } from "./DeleteAccessLogsArgs";
import { User } from "../../user/base/User";
import { AccessLogsService } from "../accessLogs.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AccessLogs)
export class AccessLogsResolverBase {
  constructor(
    protected readonly service: AccessLogsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccessLogs",
    action: "read",
    possession: "any",
  })
  async _accessLogsItemsMeta(
    @graphql.Args() args: AccessLogsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccessLogs])
  @nestAccessControl.UseRoles({
    resource: "AccessLogs",
    action: "read",
    possession: "any",
  })
  async accessLogsItems(
    @graphql.Args() args: AccessLogsFindManyArgs
  ): Promise<AccessLogs[]> {
    return this.service.accessLogsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccessLogs, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccessLogs",
    action: "read",
    possession: "own",
  })
  async accessLogs(
    @graphql.Args() args: AccessLogsFindUniqueArgs
  ): Promise<AccessLogs | null> {
    const result = await this.service.accessLogs(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccessLogs)
  @nestAccessControl.UseRoles({
    resource: "AccessLogs",
    action: "create",
    possession: "any",
  })
  async createAccessLogs(
    @graphql.Args() args: CreateAccessLogsArgs
  ): Promise<AccessLogs> {
    return await this.service.createAccessLogs({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccessLogs)
  @nestAccessControl.UseRoles({
    resource: "AccessLogs",
    action: "update",
    possession: "any",
  })
  async updateAccessLogs(
    @graphql.Args() args: UpdateAccessLogsArgs
  ): Promise<AccessLogs | null> {
    try {
      return await this.service.updateAccessLogs({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccessLogs)
  @nestAccessControl.UseRoles({
    resource: "AccessLogs",
    action: "delete",
    possession: "any",
  })
  async deleteAccessLogs(
    @graphql.Args() args: DeleteAccessLogsArgs
  ): Promise<AccessLogs | null> {
    try {
      return await this.service.deleteAccessLogs(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: AccessLogs): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
