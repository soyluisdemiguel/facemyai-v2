/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccessLogs as PrismaAccessLogs,
  User as PrismaUser,
} from "@prisma/client";

export class AccessLogsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessLogsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessLogs.count(args);
  }

  async accessLogsItems(
    args: Prisma.AccessLogsFindManyArgs
  ): Promise<PrismaAccessLogs[]> {
    return this.prisma.accessLogs.findMany(args);
  }
  async accessLogs(
    args: Prisma.AccessLogsFindUniqueArgs
  ): Promise<PrismaAccessLogs | null> {
    return this.prisma.accessLogs.findUnique(args);
  }
  async createAccessLogs(
    args: Prisma.AccessLogsCreateArgs
  ): Promise<PrismaAccessLogs> {
    return this.prisma.accessLogs.create(args);
  }
  async updateAccessLogs(
    args: Prisma.AccessLogsUpdateArgs
  ): Promise<PrismaAccessLogs> {
    return this.prisma.accessLogs.update(args);
  }
  async deleteAccessLogs(
    args: Prisma.AccessLogsDeleteArgs
  ): Promise<PrismaAccessLogs> {
    return this.prisma.accessLogs.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.accessLogs
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
