/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssistantTypes } from "./AssistantTypes";
import { AssistantTypesCountArgs } from "./AssistantTypesCountArgs";
import { AssistantTypesFindManyArgs } from "./AssistantTypesFindManyArgs";
import { AssistantTypesFindUniqueArgs } from "./AssistantTypesFindUniqueArgs";
import { CreateAssistantTypesArgs } from "./CreateAssistantTypesArgs";
import { UpdateAssistantTypesArgs } from "./UpdateAssistantTypesArgs";
import { DeleteAssistantTypesArgs } from "./DeleteAssistantTypesArgs";
import { AssistantTypesService } from "../assistantTypes.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssistantTypes)
export class AssistantTypesResolverBase {
  constructor(
    protected readonly service: AssistantTypesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssistantTypes",
    action: "read",
    possession: "any",
  })
  async _assistantTypesItemsMeta(
    @graphql.Args() args: AssistantTypesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssistantTypes])
  @nestAccessControl.UseRoles({
    resource: "AssistantTypes",
    action: "read",
    possession: "any",
  })
  async assistantTypesItems(
    @graphql.Args() args: AssistantTypesFindManyArgs
  ): Promise<AssistantTypes[]> {
    return this.service.assistantTypesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssistantTypes, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssistantTypes",
    action: "read",
    possession: "own",
  })
  async assistantTypes(
    @graphql.Args() args: AssistantTypesFindUniqueArgs
  ): Promise<AssistantTypes | null> {
    const result = await this.service.assistantTypes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssistantTypes)
  @nestAccessControl.UseRoles({
    resource: "AssistantTypes",
    action: "create",
    possession: "any",
  })
  async createAssistantTypes(
    @graphql.Args() args: CreateAssistantTypesArgs
  ): Promise<AssistantTypes> {
    return await this.service.createAssistantTypes({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssistantTypes)
  @nestAccessControl.UseRoles({
    resource: "AssistantTypes",
    action: "update",
    possession: "any",
  })
  async updateAssistantTypes(
    @graphql.Args() args: UpdateAssistantTypesArgs
  ): Promise<AssistantTypes | null> {
    try {
      return await this.service.updateAssistantTypes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssistantTypes)
  @nestAccessControl.UseRoles({
    resource: "AssistantTypes",
    action: "delete",
    possession: "any",
  })
  async deleteAssistantTypes(
    @graphql.Args() args: DeleteAssistantTypesArgs
  ): Promise<AssistantTypes | null> {
    try {
      return await this.service.deleteAssistantTypes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
