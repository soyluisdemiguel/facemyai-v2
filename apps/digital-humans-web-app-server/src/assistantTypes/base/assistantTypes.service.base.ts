/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AssistantTypes as PrismaAssistantTypes } from "@prisma/client";

export class AssistantTypesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssistantTypesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assistantTypes.count(args);
  }

  async assistantTypesItems(
    args: Prisma.AssistantTypesFindManyArgs
  ): Promise<PrismaAssistantTypes[]> {
    return this.prisma.assistantTypes.findMany(args);
  }
  async assistantTypes(
    args: Prisma.AssistantTypesFindUniqueArgs
  ): Promise<PrismaAssistantTypes | null> {
    return this.prisma.assistantTypes.findUnique(args);
  }
  async createAssistantTypes(
    args: Prisma.AssistantTypesCreateArgs
  ): Promise<PrismaAssistantTypes> {
    return this.prisma.assistantTypes.create(args);
  }
  async updateAssistantTypes(
    args: Prisma.AssistantTypesUpdateArgs
  ): Promise<PrismaAssistantTypes> {
    return this.prisma.assistantTypes.update(args);
  }
  async deleteAssistantTypes(
    args: Prisma.AssistantTypesDeleteArgs
  ): Promise<PrismaAssistantTypes> {
    return this.prisma.assistantTypes.delete(args);
  }
}
