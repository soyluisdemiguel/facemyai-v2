/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AssistantsService } from "../assistants.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AssistantsCreateInput } from "./AssistantsCreateInput";
import { Assistants } from "./Assistants";
import { AssistantsFindManyArgs } from "./AssistantsFindManyArgs";
import { AssistantsWhereUniqueInput } from "./AssistantsWhereUniqueInput";
import { AssistantsUpdateInput } from "./AssistantsUpdateInput";
import { AssistantSettingsFindManyArgs } from "../../assistantSettings/base/AssistantSettingsFindManyArgs";
import { AssistantSettings } from "../../assistantSettings/base/AssistantSettings";
import { AssistantSettingsWhereUniqueInput } from "../../assistantSettings/base/AssistantSettingsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AssistantsControllerBase {
  constructor(
    protected readonly service: AssistantsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Assistants })
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAssistants(
    @common.Body() data: AssistantsCreateInput
  ): Promise<Assistants> {
    return await this.service.createAssistants({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        openAiAssistantId: true,
        typeId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Assistants] })
  @ApiNestedQuery(AssistantsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assistantsItems(@common.Req() request: Request): Promise<Assistants[]> {
    const args = plainToClass(AssistantsFindManyArgs, request.query);
    return this.service.assistantsItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        openAiAssistantId: true,
        typeId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Assistants })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assistants(
    @common.Param() params: AssistantsWhereUniqueInput
  ): Promise<Assistants | null> {
    const result = await this.service.assistants({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        openAiAssistantId: true,
        typeId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Assistants })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAssistants(
    @common.Param() params: AssistantsWhereUniqueInput,
    @common.Body() data: AssistantsUpdateInput
  ): Promise<Assistants | null> {
    try {
      return await this.service.updateAssistants({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          openAiAssistantId: true,
          typeId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Assistants })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAssistants(
    @common.Param() params: AssistantsWhereUniqueInput
  ): Promise<Assistants | null> {
    try {
      return await this.service.deleteAssistants({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          openAiAssistantId: true,
          typeId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/assistantSettingsItems")
  @ApiNestedQuery(AssistantSettingsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "read",
    possession: "any",
  })
  async findAssistantSettingsItems(
    @common.Req() request: Request,
    @common.Param() params: AssistantsWhereUniqueInput
  ): Promise<AssistantSettings[]> {
    const query = plainToClass(AssistantSettingsFindManyArgs, request.query);
    const results = await this.service.findAssistantSettingsItems(params.id, {
      ...query,
      select: {
        assistant: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        settingName: true,
        settingValue: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assistantSettingsItems")
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "update",
    possession: "any",
  })
  async connectAssistantSettingsItems(
    @common.Param() params: AssistantsWhereUniqueInput,
    @common.Body() body: AssistantSettingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assistantSettingsItems: {
        connect: body,
      },
    };
    await this.service.updateAssistants({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assistantSettingsItems")
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "update",
    possession: "any",
  })
  async updateAssistantSettingsItems(
    @common.Param() params: AssistantsWhereUniqueInput,
    @common.Body() body: AssistantSettingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assistantSettingsItems: {
        set: body,
      },
    };
    await this.service.updateAssistants({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assistantSettingsItems")
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "update",
    possession: "any",
  })
  async disconnectAssistantSettingsItems(
    @common.Param() params: AssistantsWhereUniqueInput,
    @common.Body() body: AssistantSettingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assistantSettingsItems: {
        disconnect: body,
      },
    };
    await this.service.updateAssistants({
      where: params,
      data,
      select: { id: true },
    });
  }
}
