/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Assistants } from "./Assistants";
import { AssistantsCountArgs } from "./AssistantsCountArgs";
import { AssistantsFindManyArgs } from "./AssistantsFindManyArgs";
import { AssistantsFindUniqueArgs } from "./AssistantsFindUniqueArgs";
import { CreateAssistantsArgs } from "./CreateAssistantsArgs";
import { UpdateAssistantsArgs } from "./UpdateAssistantsArgs";
import { DeleteAssistantsArgs } from "./DeleteAssistantsArgs";
import { AssistantSettingsFindManyArgs } from "../../assistantSettings/base/AssistantSettingsFindManyArgs";
import { AssistantSettings } from "../../assistantSettings/base/AssistantSettings";
import { AssistantsService } from "../assistants.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Assistants)
export class AssistantsResolverBase {
  constructor(
    protected readonly service: AssistantsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "read",
    possession: "any",
  })
  async _assistantsItemsMeta(
    @graphql.Args() args: AssistantsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Assistants])
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "read",
    possession: "any",
  })
  async assistantsItems(
    @graphql.Args() args: AssistantsFindManyArgs
  ): Promise<Assistants[]> {
    return this.service.assistantsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Assistants, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "read",
    possession: "own",
  })
  async assistants(
    @graphql.Args() args: AssistantsFindUniqueArgs
  ): Promise<Assistants | null> {
    const result = await this.service.assistants(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Assistants)
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "create",
    possession: "any",
  })
  async createAssistants(
    @graphql.Args() args: CreateAssistantsArgs
  ): Promise<Assistants> {
    return await this.service.createAssistants({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Assistants)
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "update",
    possession: "any",
  })
  async updateAssistants(
    @graphql.Args() args: UpdateAssistantsArgs
  ): Promise<Assistants | null> {
    try {
      return await this.service.updateAssistants({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Assistants)
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "delete",
    possession: "any",
  })
  async deleteAssistants(
    @graphql.Args() args: DeleteAssistantsArgs
  ): Promise<Assistants | null> {
    try {
      return await this.service.deleteAssistants(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AssistantSettings], {
    name: "assistantSettingsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "read",
    possession: "any",
  })
  async findAssistantSettingsItems(
    @graphql.Parent() parent: Assistants,
    @graphql.Args() args: AssistantSettingsFindManyArgs
  ): Promise<AssistantSettings[]> {
    const results = await this.service.findAssistantSettingsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
