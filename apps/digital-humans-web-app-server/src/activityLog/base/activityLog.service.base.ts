/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ActivityLog as PrismaActivityLog,
  User as PrismaUser,
} from "@prisma/client";

export class ActivityLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ActivityLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.activityLog.count(args);
  }

  async activityLogs(
    args: Prisma.ActivityLogFindManyArgs
  ): Promise<PrismaActivityLog[]> {
    return this.prisma.activityLog.findMany(args);
  }
  async activityLog(
    args: Prisma.ActivityLogFindUniqueArgs
  ): Promise<PrismaActivityLog | null> {
    return this.prisma.activityLog.findUnique(args);
  }
  async createActivityLog(
    args: Prisma.ActivityLogCreateArgs
  ): Promise<PrismaActivityLog> {
    return this.prisma.activityLog.create(args);
  }
  async updateActivityLog(
    args: Prisma.ActivityLogUpdateArgs
  ): Promise<PrismaActivityLog> {
    return this.prisma.activityLog.update(args);
  }
  async deleteActivityLog(
    args: Prisma.ActivityLogDeleteArgs
  ): Promise<PrismaActivityLog> {
    return this.prisma.activityLog.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.activityLog
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
