/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sessions as PrismaSessions } from "@prisma/client";

export class SessionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SessionsCountArgs, "select">): Promise<number> {
    return this.prisma.sessions.count(args);
  }

  async sessionsItems(
    args: Prisma.SessionsFindManyArgs
  ): Promise<PrismaSessions[]> {
    return this.prisma.sessions.findMany(args);
  }
  async sessions(
    args: Prisma.SessionsFindUniqueArgs
  ): Promise<PrismaSessions | null> {
    return this.prisma.sessions.findUnique(args);
  }
  async createSessions(
    args: Prisma.SessionsCreateArgs
  ): Promise<PrismaSessions> {
    return this.prisma.sessions.create(args);
  }
  async updateSessions(
    args: Prisma.SessionsUpdateArgs
  ): Promise<PrismaSessions> {
    return this.prisma.sessions.update(args);
  }
  async deleteSessions(
    args: Prisma.SessionsDeleteArgs
  ): Promise<PrismaSessions> {
    return this.prisma.sessions.delete(args);
  }
}
