/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Sessions } from "./Sessions";
import { SessionsCountArgs } from "./SessionsCountArgs";
import { SessionsFindManyArgs } from "./SessionsFindManyArgs";
import { SessionsFindUniqueArgs } from "./SessionsFindUniqueArgs";
import { DeleteSessionsArgs } from "./DeleteSessionsArgs";
import { SessionsService } from "../sessions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sessions)
export class SessionsResolverBase {
  constructor(
    protected readonly service: SessionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sessions",
    action: "read",
    possession: "any",
  })
  async _sessionsItemsMeta(
    @graphql.Args() args: SessionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sessions])
  @nestAccessControl.UseRoles({
    resource: "Sessions",
    action: "read",
    possession: "any",
  })
  async sessionsItems(
    @graphql.Args() args: SessionsFindManyArgs
  ): Promise<Sessions[]> {
    return this.service.sessionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sessions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sessions",
    action: "read",
    possession: "own",
  })
  async sessions(
    @graphql.Args() args: SessionsFindUniqueArgs
  ): Promise<Sessions | null> {
    const result = await this.service.sessions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sessions)
  @nestAccessControl.UseRoles({
    resource: "Sessions",
    action: "delete",
    possession: "any",
  })
  async deleteSessions(
    @graphql.Args() args: DeleteSessionsArgs
  ): Promise<Sessions | null> {
    try {
      return await this.service.deleteSessions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
