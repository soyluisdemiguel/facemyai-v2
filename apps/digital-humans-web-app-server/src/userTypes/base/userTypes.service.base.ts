/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserTypes as PrismaUserTypes } from "@prisma/client";

export class UserTypesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserTypesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userTypes.count(args);
  }

  async userTypesItems(
    args: Prisma.UserTypesFindManyArgs
  ): Promise<PrismaUserTypes[]> {
    return this.prisma.userTypes.findMany(args);
  }
  async userTypes(
    args: Prisma.UserTypesFindUniqueArgs
  ): Promise<PrismaUserTypes | null> {
    return this.prisma.userTypes.findUnique(args);
  }
  async createUserTypes(
    args: Prisma.UserTypesCreateArgs
  ): Promise<PrismaUserTypes> {
    return this.prisma.userTypes.create(args);
  }
  async updateUserTypes(
    args: Prisma.UserTypesUpdateArgs
  ): Promise<PrismaUserTypes> {
    return this.prisma.userTypes.update(args);
  }
  async deleteUserTypes(
    args: Prisma.UserTypesDeleteArgs
  ): Promise<PrismaUserTypes> {
    return this.prisma.userTypes.delete(args);
  }
}
