/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AssistantSettings as PrismaAssistantSettings,
  Assistants as PrismaAssistants,
} from "@prisma/client";

export class AssistantSettingsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssistantSettingsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assistantSettings.count(args);
  }

  async assistantSettingsItems(
    args: Prisma.AssistantSettingsFindManyArgs
  ): Promise<PrismaAssistantSettings[]> {
    return this.prisma.assistantSettings.findMany(args);
  }
  async assistantSettings(
    args: Prisma.AssistantSettingsFindUniqueArgs
  ): Promise<PrismaAssistantSettings | null> {
    return this.prisma.assistantSettings.findUnique(args);
  }
  async createAssistantSettings(
    args: Prisma.AssistantSettingsCreateArgs
  ): Promise<PrismaAssistantSettings> {
    return this.prisma.assistantSettings.create(args);
  }
  async updateAssistantSettings(
    args: Prisma.AssistantSettingsUpdateArgs
  ): Promise<PrismaAssistantSettings> {
    return this.prisma.assistantSettings.update(args);
  }
  async deleteAssistantSettings(
    args: Prisma.AssistantSettingsDeleteArgs
  ): Promise<PrismaAssistantSettings> {
    return this.prisma.assistantSettings.delete(args);
  }

  async getAssistant(parentId: string): Promise<PrismaAssistants | null> {
    return this.prisma.assistantSettings
      .findUnique({
        where: { id: parentId },
      })
      .assistant();
  }
}
