/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AssistantSettings } from "./AssistantSettings";
import { AssistantSettingsCountArgs } from "./AssistantSettingsCountArgs";
import { AssistantSettingsFindManyArgs } from "./AssistantSettingsFindManyArgs";
import { AssistantSettingsFindUniqueArgs } from "./AssistantSettingsFindUniqueArgs";
import { CreateAssistantSettingsArgs } from "./CreateAssistantSettingsArgs";
import { UpdateAssistantSettingsArgs } from "./UpdateAssistantSettingsArgs";
import { DeleteAssistantSettingsArgs } from "./DeleteAssistantSettingsArgs";
import { Assistants } from "../../assistants/base/Assistants";
import { AssistantSettingsService } from "../assistantSettings.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AssistantSettings)
export class AssistantSettingsResolverBase {
  constructor(
    protected readonly service: AssistantSettingsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "read",
    possession: "any",
  })
  async _assistantSettingsItemsMeta(
    @graphql.Args() args: AssistantSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AssistantSettings])
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "read",
    possession: "any",
  })
  async assistantSettingsItems(
    @graphql.Args() args: AssistantSettingsFindManyArgs
  ): Promise<AssistantSettings[]> {
    return this.service.assistantSettingsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AssistantSettings, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "read",
    possession: "own",
  })
  async assistantSettings(
    @graphql.Args() args: AssistantSettingsFindUniqueArgs
  ): Promise<AssistantSettings | null> {
    const result = await this.service.assistantSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssistantSettings)
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "create",
    possession: "any",
  })
  async createAssistantSettings(
    @graphql.Args() args: CreateAssistantSettingsArgs
  ): Promise<AssistantSettings> {
    return await this.service.createAssistantSettings({
      ...args,
      data: {
        ...args.data,

        assistant: args.data.assistant
          ? {
              connect: args.data.assistant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AssistantSettings)
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "update",
    possession: "any",
  })
  async updateAssistantSettings(
    @graphql.Args() args: UpdateAssistantSettingsArgs
  ): Promise<AssistantSettings | null> {
    try {
      return await this.service.updateAssistantSettings({
        ...args,
        data: {
          ...args.data,

          assistant: args.data.assistant
            ? {
                connect: args.data.assistant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssistantSettings)
  @nestAccessControl.UseRoles({
    resource: "AssistantSettings",
    action: "delete",
    possession: "any",
  })
  async deleteAssistantSettings(
    @graphql.Args() args: DeleteAssistantSettingsArgs
  ): Promise<AssistantSettings | null> {
    try {
      return await this.service.deleteAssistantSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Assistants, {
    nullable: true,
    name: "assistant",
  })
  @nestAccessControl.UseRoles({
    resource: "Assistants",
    action: "read",
    possession: "any",
  })
  async getAssistant(
    @graphql.Parent() parent: AssistantSettings
  ): Promise<Assistants | null> {
    const result = await this.service.getAssistant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
